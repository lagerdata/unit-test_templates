<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_watchdog_c_c32_x_x_8h" kind="file" language="C++">
    <compoundname>WatchdogCC32XX.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes refid="_watchdog_8h" local="no">ti/drivers/Watchdog.h</includes>
    <incdepgraph>
      <node id="437">
        <label>stdbool.h</label>
      </node>
      <node id="438">
        <label>ti/drivers/Watchdog.h</label>
        <link refid="_watchdog_8h"/>
        <childnode refid="436" relation="include">
        </childnode>
      </node>
      <node id="436">
        <label>stdint.h</label>
      </node>
      <node id="435">
        <label>WatchdogCC32XX.h</label>
        <link refid="_watchdog_c_c32_x_x_8h"/>
        <childnode refid="436" relation="include">
        </childnode>
        <childnode refid="437" relation="include">
        </childnode>
        <childnode refid="438" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="struct_watchdog_c_c32_x_x___h_w_attrs" prot="public">WatchdogCC32XX_HWAttrs</innerclass>
    <innerclass refid="struct_watchdog_c_c32_x_x___object" prot="public">WatchdogCC32XX_Object</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___watchdog___c_m_d_1ga2180fa0accdea4b379edd12a3a5d9113" prot="public" static="no">
        <name>WatchdogCC32XX_CMD_IS_TIMER_ENABLE</name>
        <initializer>(<ref refid="group___watchdog___c_o_n_t_r_o_l_1ga4d1b16e67bf555b8fe49182eb8a28b97" kindref="member">Watchdog_CMD_RESERVED</ref> + 0)</initializer>
        <briefdescription>
<para>Command used by Watchdog_control to determines whether the watchdog timer is enabled. </para>        </briefdescription>
        <detaileddescription>
<para>With this command code, <bold>arg</bold> is a pointer to a <computeroutput>bool</computeroutput>. <bold>*arg</bold> contains <computeroutput>true</computeroutput> if the watchdog timer is enabled, else <computeroutput>false</computeroutput> if it is not. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx/source/ti/drivers/watchdog/WatchdogCC32XX.h" line="153" column="9" bodyfile="exports/tidrivers_cc32xx/source/ti/drivers/watchdog/WatchdogCC32XX.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___watchdog___c_m_d_1ga5ef077bbc3ab4392e24fc13282993d8e" prot="public" static="no">
        <name>WatchdogCC32XX_CMD_GET_TIMER_VALUE</name>
        <initializer>(<ref refid="group___watchdog___c_o_n_t_r_o_l_1ga4d1b16e67bf555b8fe49182eb8a28b97" kindref="member">Watchdog_CMD_RESERVED</ref> + 1)</initializer>
        <briefdescription>
<para>Command used by Watchdog_control to gets the current watchdog timer value. </para>        </briefdescription>
        <detaileddescription>
<para>With this command code, <bold>arg</bold> is a pointer to an <emphasis>integer</emphasis>. <bold>*arg</bold> contains the current value of the watchdog timer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx/source/ti/drivers/watchdog/WatchdogCC32XX.h" line="163" column="9" bodyfile="exports/tidrivers_cc32xx/source/ti/drivers/watchdog/WatchdogCC32XX.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___watchdog___c_m_d_1ga8a2cadcd075a2a23fcfa9d980adf09a6" prot="public" static="no">
        <name>WatchdogCC32XX_CMD_IS_TIMER_LOCKED</name>
        <initializer>(<ref refid="group___watchdog___c_o_n_t_r_o_l_1ga4d1b16e67bf555b8fe49182eb8a28b97" kindref="member">Watchdog_CMD_RESERVED</ref> + 2)</initializer>
        <briefdescription>
<para>Command used by Watchdog_control to determines whether the watchdog timer is locked. </para>        </briefdescription>
        <detaileddescription>
<para>With this command code, <bold>arg</bold> is a pointer to a <computeroutput>bool</computeroutput>. <bold>*arg</bold> contains <computeroutput>true</computeroutput> if the watchdog timer is locked, else <computeroutput>false</computeroutput> if it is not. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx/source/ti/drivers/watchdog/WatchdogCC32XX.h" line="174" column="9" bodyfile="exports/tidrivers_cc32xx/source/ti/drivers/watchdog/WatchdogCC32XX.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___watchdog___c_m_d_1ga1d0226cc406f566d7832552edd06bc28" prot="public" static="no">
        <name>WatchdogCC32XX_CMD_GET_TIMER_RELOAD_VALUE</name>
        <initializer>(<ref refid="group___watchdog___c_o_n_t_r_o_l_1ga4d1b16e67bf555b8fe49182eb8a28b97" kindref="member">Watchdog_CMD_RESERVED</ref> + 3)</initializer>
        <briefdescription>
<para>Command used by Watchdog_control to gets the current watchdog timer reload value. </para>        </briefdescription>
        <detaileddescription>
<para>With this command code, <bold>arg</bold> is a pointer to an <emphasis>integer</emphasis>. <bold>*arg</bold> contains the current value loaded into the watchdog timer when the count reaches zero for the first time. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx/source/ti/drivers/watchdog/WatchdogCC32XX.h" line="185" column="9" bodyfile="exports/tidrivers_cc32xx/source/ti/drivers/watchdog/WatchdogCC32XX.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_watchdog_c_c32_x_x_8h_1a6035ac575fbea7e6df0bcee2698855d1" prot="public" static="no" mutable="no">
        <type>const <ref refid="struct_watchdog___fxn_table" kindref="compound">Watchdog_FxnTable</ref></type>
        <definition>const Watchdog_FxnTable WatchdogCC32XX_fxnTable</definition>
        <argsstring></argsstring>
        <name>WatchdogCC32XX_fxnTable</name>
        <briefdescription>
<para>Watchdog function table for CC32XX. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx/source/ti/drivers/watchdog/WatchdogCC32XX.h" line="191" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Watchdog timer driver implementation for CC32XX. </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
</para><para>The Watchdog header file for CC32XX should be included in an application as follows: <programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/Watchdog.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/watchdog/WatchdogCC32XX.h&gt;</highlight></codeline>
</programlisting></para><para>Refer to <ref refid="_watchdog_8h" kindref="compound">Watchdog.h</ref> for a complete description of APIs.</para><para>This Watchdog driver implementation is designed to operate on a CC32XX device. Once opened, CC32XX Watchdog will count down from the reload value specified in the <ref refid="struct_watchdog_c_c32_x_x___h_w_attrs" kindref="compound">WatchdogCC32XX_HWAttrs</ref>. If it times out, the Watchdog interrupt flag will be set, and a user-provided callback function will be called. If the Watchdog Timer is allowed to time out again while the interrupt flag is still pending, a reset signal will be generated. To prevent a reset, <ref refid="_watchdog_8h_1a396decd6b1807db10c636f9987c3be4c" kindref="member">Watchdog_clear()</ref> must be called to clear the interrupt flag.</para><para><simplesect kind="warning"><para>The watchdog peripheral does not support a Non-Maskable Interrupt (NMI).</para></simplesect>
The reload value from which the Watchdog Timer counts down may be changed during runtime using <ref refid="_watchdog_8h_1a63ea82dda83e42e236578b9810e56880" kindref="member">Watchdog_setReload()</ref>.</para><para><ref refid="_watchdog_8h_1a1c0dfea7011b06f303d01afb631ffbdd" kindref="member">Watchdog_close()</ref> is <bold>not</bold> supported by this driver implementation.</para><para>By default the Watchdog driver has resets turned on. This feature cannot be disabled.</para><para>To have a user-defined function run at the warning interrupt, first define a void-type function that takes a Watchdog_Handle cast to a UArg as an argument. The callback and code to start the Watchdog timer are shown below.</para><para><programlisting><codeline><highlight class="normal">void<sp/>watchdogCallback(UArg<sp/>handle);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Watchdog_Handle<sp/>handle;</highlight></codeline>
<codeline><highlight class="normal">Watchdog_Params<sp/>params;</highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>tickValue;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Watchdog_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal">params.callbackFxn<sp/>=<sp/>watchdogCallback;</highlight></codeline>
<codeline><highlight class="normal">handle<sp/>=<sp/>Watchdog_open(Watchdog_configIndex,<sp/>&amp;params);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>timeout<sp/>period<sp/>to<sp/>100<sp/>ms</highlight></codeline>
<codeline><highlight class="normal">tickValue<sp/>=<sp/>Watchdog_convertMsToTicks(handle,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal">Watchdog_setReload(handle,<sp/>tickValue);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>watchdogCallback(UArg<sp/>handle)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>User-defined<sp/>code<sp/>here</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><heading level="1">Power Driver Usage</heading>
</para><para>The watchdog timer driver does not set any power constraints. If the power driver is enabled, the application will continue to aggressively attempt to place the device into the lowest power state possible.</para><para>When the device enters Low Power Deep Sleep, the peripheral registers are reset. After a transition from Low Power Deep Sleep, the watchdog timer will be re-initialized automatically with the most recently set reload value. If <ref refid="_watchdog_8h_1a63ea82dda83e42e236578b9810e56880" kindref="member">Watchdog_setReload()</ref> was never called, the <ref refid="struct_watchdog_c_c32_x_x___h_w_attrs_1a0f80ac4c136429bafd1b6d68a9d61c7a" kindref="member">WatchdogCC32XX_HWAttrs.reloadValue</ref> is used. With each transition to and from Low Power Deep Sleep, the watchdog timer is implicitly cleared. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015-2019,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*!****************************************************************************</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/>@file<sp/><sp/><sp/><sp/><sp/><sp/><sp/>WatchdogCC32XX.h</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/>Watchdog<sp/>timer<sp/>driver<sp/>implementation<sp/>for<sp/>CC32XX</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>Watchdog<sp/>header<sp/>file<sp/>for<sp/>CC32XX<sp/>should<sp/>be<sp/>included<sp/>in<sp/>an<sp/>application</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/Watchdog.h&gt;</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/watchdog/WatchdogCC32XX.h&gt;</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/><sp/>Refer<sp/>to<sp/>@ref<sp/>Watchdog.h<sp/>for<sp/>a<sp/>complete<sp/>description<sp/>of<sp/>APIs.</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>Watchdog<sp/>driver<sp/>implementation<sp/>is<sp/>designed<sp/>to<sp/>operate<sp/>on<sp/>a<sp/>CC32XX</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/>device.<sp/>Once<sp/>opened,<sp/>CC32XX<sp/>Watchdog<sp/>will<sp/>count<sp/>down<sp/>from<sp/>the<sp/>reload</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/><sp/>value<sp/>specified<sp/>in<sp/>the<sp/>WatchdogCC32XX_HWAttrs.<sp/>If<sp/>it<sp/>times<sp/>out,<sp/>the</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/>Watchdog<sp/>interrupt<sp/>flag<sp/>will<sp/>be<sp/>set,<sp/>and<sp/>a<sp/>user-provided<sp/>callback<sp/>function</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/><sp/>will<sp/>be<sp/>called.<sp/>If<sp/>the<sp/>Watchdog<sp/>Timer<sp/>is<sp/>allowed<sp/>to<sp/>time<sp/>out<sp/>again<sp/>while</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>interrupt<sp/>flag<sp/>is<sp/>still<sp/>pending,<sp/>a<sp/>reset<sp/>signal<sp/>will<sp/>be<sp/>generated.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/>To<sp/>prevent<sp/>a<sp/>reset,<sp/>Watchdog_clear()<sp/>must<sp/>be<sp/>called<sp/>to<sp/>clear<sp/>the<sp/>interrupt</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/>flag.</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/>@warning<sp/>The<sp/>watchdog<sp/>peripheral<sp/>does<sp/>not<sp/>support<sp/>a<sp/>Non-Maskable<sp/>Interrupt<sp/>(NMI).</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>reload<sp/>value<sp/>from<sp/>which<sp/>the<sp/>Watchdog<sp/>Timer<sp/>counts<sp/>down<sp/>may<sp/>be<sp/>changed</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/>during<sp/>runtime<sp/>using<sp/>Watchdog_setReload().</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/><sp/>Watchdog_close()<sp/>is<sp/>&lt;b&gt;not&lt;/b&gt;<sp/>supported<sp/>by<sp/>this<sp/>driver<sp/>implementation.</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/><sp/>By<sp/>default<sp/>the<sp/>Watchdog<sp/>driver<sp/>has<sp/>resets<sp/>turned<sp/>on.<sp/>This<sp/>feature<sp/>cannot</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/><sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/><sp/>To<sp/>have<sp/>a<sp/>user-defined<sp/>function<sp/>run<sp/>at<sp/>the<sp/>warning<sp/>interrupt,<sp/>first<sp/>define</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/><sp/>a<sp/>void-type<sp/>function<sp/>that<sp/>takes<sp/>a<sp/>Watchdog_Handle<sp/>cast<sp/>to<sp/>a<sp/>UArg<sp/>as<sp/>an</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/><sp/>argument.<sp/>The<sp/>callback<sp/>and<sp/>code<sp/>to<sp/>start<sp/>the<sp/>Watchdog<sp/>timer<sp/>are<sp/>shown<sp/>below.</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/><sp/>void<sp/>watchdogCallback(UArg<sp/>handle);</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/><sp/>...</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/><sp/>Watchdog_Handle<sp/>handle;</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/>Watchdog_Params<sp/>params;</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/>uint32_t<sp/>tickValue;</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/><sp/>Watchdog_Params_init(&amp;params);</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/><sp/>params.callbackFxn<sp/>=<sp/>watchdogCallback;</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/><sp/>handle<sp/>=<sp/>Watchdog_open(Watchdog_configIndex,<sp/>&amp;params);</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Set<sp/>timeout<sp/>period<sp/>to<sp/>100<sp/>ms</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/><sp/>tickValue<sp/>=<sp/>Watchdog_convertMsToTicks(handle,<sp/>100);</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/><sp/>Watchdog_setReload(handle,<sp/>tickValue);</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/><sp/>...</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/><sp/>void<sp/>watchdogCallback(UArg<sp/>handle)</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>User-defined<sp/>code<sp/>here</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Power<sp/>Driver<sp/>Usage<sp/>#</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>watchdog<sp/>timer<sp/>driver<sp/>does<sp/>not<sp/>set<sp/>any<sp/>power<sp/>constraints.<sp/>If<sp/>the<sp/>power</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/><sp/>driver<sp/>is<sp/>enabled,<sp/>the<sp/>application<sp/>will<sp/>continue<sp/>to<sp/>aggressively<sp/>attempt</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/><sp/>to<sp/>place<sp/>the<sp/>device<sp/>into<sp/>the<sp/>lowest<sp/>power<sp/>state<sp/>possible.</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/><sp/>When<sp/>the<sp/>device<sp/>enters<sp/>Low<sp/>Power<sp/>Deep<sp/>Sleep,<sp/>the<sp/>peripheral<sp/>registers<sp/>are</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/><sp/>reset.<sp/>After<sp/>a<sp/>transition<sp/>from<sp/>Low<sp/>Power<sp/>Deep<sp/>Sleep,<sp/>the<sp/>watchdog<sp/>timer<sp/>will</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/><sp/>be<sp/>re-initialized<sp/>automatically<sp/>with<sp/>the<sp/>most<sp/>recently<sp/>set<sp/>reload<sp/>value.<sp/>If</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/><sp/>Watchdog_setReload()<sp/>was<sp/>never<sp/>called,<sp/>the</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/><sp/>#WatchdogCC32XX_HWAttrs.reloadValue<sp/>is<sp/>used.<sp/>With<sp/>each<sp/>transition<sp/>to<sp/>and</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/><sp/>from<sp/>Low<sp/>Power<sp/>Deep<sp/>Sleep,<sp/>the<sp/>watchdog<sp/>timer<sp/>is<sp/>implicitly<sp/>cleared.</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>******************************************************************************</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ti_drivers_watchdog_WatchdogCC32XX__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_watchdog_WatchdogCC32XX__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_watchdog_8h" kindref="compound">ti/drivers/Watchdog.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="comment">/*<sp/>Add<sp/>WatchdogCC32XX_STATUS_*<sp/>macros<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="group___watchdog___c_m_d_1ga2180fa0accdea4b379edd12a3a5d9113" refkind="member"><highlight class="preprocessor">#define<sp/>WatchdogCC32XX_CMD_IS_TIMER_ENABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Watchdog_CMD_RESERVED<sp/>+<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="group___watchdog___c_m_d_1ga5ef077bbc3ab4392e24fc13282993d8e" refkind="member"><highlight class="preprocessor">#define<sp/>WatchdogCC32XX_CMD_GET_TIMER_VALUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Watchdog_CMD_RESERVED<sp/>+<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="group___watchdog___c_m_d_1ga8a2cadcd075a2a23fcfa9d980adf09a6" refkind="member"><highlight class="preprocessor">#define<sp/>WatchdogCC32XX_CMD_IS_TIMER_LOCKED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Watchdog_CMD_RESERVED<sp/>+<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="185" refid="group___watchdog___c_m_d_1ga1d0226cc406f566d7832552edd06bc28" refkind="member"><highlight class="preprocessor">#define<sp/>WatchdogCC32XX_CMD_GET_TIMER_RELOAD_VALUE<sp/><sp/><sp/>(Watchdog_CMD_RESERVED<sp/>+<sp/>3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_watchdog___fxn_table" kindref="compound">Watchdog_FxnTable</ref><sp/><ref refid="_watchdog_c_c32_x_x_8h_1a6035ac575fbea7e6df0bcee2698855d1" kindref="member">WatchdogCC32XX_fxnTable</ref>;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="206" refid="struct_watchdog_c_c32_x_x___h_w_attrs" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="207" refid="struct_watchdog_c_c32_x_x___h_w_attrs_1ae1f13f3ec247fee84c0d926e78b3e6a8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_watchdog_c_c32_x_x___h_w_attrs_1ae1f13f3ec247fee84c0d926e78b3e6a8" kindref="member">baseAddr</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="208" refid="struct_watchdog_c_c32_x_x___h_w_attrs_1ac7a3918d5b95722f778f44d305c984d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_watchdog_c_c32_x_x___h_w_attrs_1ac7a3918d5b95722f778f44d305c984d4" kindref="member">intNum</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="209" refid="struct_watchdog_c_c32_x_x___h_w_attrs_1acf1f11e88df1ffd3f5250d35c43c1c01" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_watchdog_c_c32_x_x___h_w_attrs_1acf1f11e88df1ffd3f5250d35c43c1c01" kindref="member">intPriority</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="210" refid="struct_watchdog_c_c32_x_x___h_w_attrs_1a0f80ac4c136429bafd1b6d68a9d61c7a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><ref refid="struct_watchdog_c_c32_x_x___h_w_attrs_1a0f80ac4c136429bafd1b6d68a9d61c7a" kindref="member">reloadValue</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="211"><highlight class="normal">}<sp/><ref refid="struct_watchdog_c_c32_x_x___h_w_attrs" kindref="compound">WatchdogCC32XX_HWAttrs</ref>;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="struct_watchdog_c_c32_x_x___object" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="219" refid="struct_watchdog_c_c32_x_x___object_1a7bebc6d6c701b1f18019ed8b4d7d1e86" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_power___notify_obj" kindref="compound">Power_NotifyObj</ref><sp/><sp/><sp/><sp/><sp/><ref refid="struct_watchdog_c_c32_x_x___object_1a7bebc6d6c701b1f18019ed8b4d7d1e86" kindref="member">notifyObj</ref>;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>reload<sp/>value<sp/>can<sp/>be<sp/>set<sp/>at<sp/>runtime;<sp/>therefore<sp/>we<sp/>can&apos;t<sp/>rely</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>on<sp/>the<sp/>reload<sp/>value<sp/>supplied<sp/>in<sp/>the<sp/>HWAttrs<sp/>after<sp/>a<sp/>LPDS<sp/>transition.</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="struct_watchdog_c_c32_x_x___object_1a2d8f9f3c5c8d91def7280bc212d9ef68" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_watchdog_c_c32_x_x___object_1a2d8f9f3c5c8d91def7280bc212d9ef68" kindref="member">reloadValue</ref>;</highlight></codeline>
<codeline lineno="225" refid="struct_watchdog_c_c32_x_x___object_1a7cc63a6eda22187296d56f034af26406" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_watchdog_8h_1ab1aa5862661c88a16b9d7bc12709d51e" kindref="member">Watchdog_DebugMode</ref><sp/><sp/><ref refid="struct_watchdog_c_c32_x_x___object_1a7cc63a6eda22187296d56f034af26406" kindref="member">debugMode</ref>;</highlight></codeline>
<codeline lineno="226" refid="struct_watchdog_c_c32_x_x___object_1a7a1810a1fd73af5afda05581cbba2d78" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_watchdog_c_c32_x_x___object_1a7a1810a1fd73af5afda05581cbba2d78" kindref="member">isOpen</ref>;</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}<sp/><ref refid="struct_watchdog_c_c32_x_x___object" kindref="compound">WatchdogCC32XX_Object</ref>;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_watchdog_WatchdogCC32XX__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="exports/tidrivers_cc32xx/source/ti/drivers/watchdog/WatchdogCC32XX.h"/>
  </compounddef>
</doxygen>
