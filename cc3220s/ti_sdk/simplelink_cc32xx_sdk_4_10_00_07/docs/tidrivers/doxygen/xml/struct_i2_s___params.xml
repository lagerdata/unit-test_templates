<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="struct_i2_s___params" kind="struct" language="C++" prot="public">
    <compoundname>I2S_Params</compoundname>
    <includes refid="_i2_s_8h" local="no">I2S.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_i2_s___params_1a3b7f7f942b6fb548141409be5a228e9c" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool I2S_Params::trueI2sFormat</definition>
        <argsstring></argsstring>
        <name>trueI2sFormat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Activate &quot;true I2S format&quot;. false: Data are read/write on the data lines from the first SCK period of the WS half-period to the last SCK edge of the WS half-period. true: Data are read/write on the data lines from the second SCK period of the WS half-period to the first SCK edge of the next WS half-period. If no padding is activated, this corresponds to the I2S standard. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" line="826" column="1" bodyfile="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" bodystart="826" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1a9d3ad248a0bca19f6c8aba2ef4e311c7" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool I2S_Params::invertWS</definition>
        <argsstring></argsstring>
        <name>invertWS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>WS must be internally inverted when using I2S data format. false: The WS signal is not internally inverted. true: The WS signal is internally inverted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" line="834" column="1" bodyfile="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" bodystart="834" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1aa6bc7fe594699bd27444b2b3b8aa17e4" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool I2S_Params::isMSBFirst</definition>
        <argsstring></argsstring>
        <name>isMSBFirst</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Endianness selection. Not available on CC26XX. false: The samples are transmitted LSB first. true: The samples are transmitted MSB first. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" line="839" column="1" bodyfile="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" bodystart="839" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1a040e104c9b7118fb5719b3007801a2cb" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool I2S_Params::isDMAUnused</definition>
        <argsstring></argsstring>
        <name>isDMAUnused</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Selection between DMA transmissions and CPU transmissions. false: Transmission are performed by DMA. true: Transmission are performed by CPU. Not available for CC26XX: all transmissions are performed by CPU. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" line="844" column="1" bodyfile="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" bodystart="844" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1a257e437c1d8fb08ddd7457c47c479db5" prot="public" static="no" mutable="no">
        <type><ref refid="_i2_s_8h_1afc6b50bcb4c5bd0254c5efa0cdc14222" kindref="member">I2S_MemoryLength</ref></type>
        <definition>I2S_MemoryLength I2S_Params::memorySlotLength</definition>
        <argsstring></argsstring>
        <name>memorySlotLength</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Memory buffer used. <ref refid="_i2_s_8h_1afc6b50bcb4c5bd0254c5efa0cdc14222a13e1dbc37a214b697892127dd14b39ec" kindref="member">I2S_MEMORY_LENGTH_8BITS</ref>: Memory length is 8 bits (not available for CC26XX). <ref refid="_i2_s_8h_1afc6b50bcb4c5bd0254c5efa0cdc14222aa95b67ba7278bcb1d9a64cba9a8e1bc8" kindref="member">I2S_MEMORY_LENGTH_16BITS</ref>: Memory length is 16 bits. <ref refid="_i2_s_8h_1afc6b50bcb4c5bd0254c5efa0cdc14222acc56087b412f11af3dc890f066fac0b6" kindref="member">I2S_MEMORY_LENGTH_24BITS</ref>: Memory length is 24 bits. <ref refid="_i2_s_8h_1afc6b50bcb4c5bd0254c5efa0cdc14222a926727054bff1f3cbe2540434d0fab42" kindref="member">I2S_MEMORY_LENGTH_32BITS</ref>: Memory length is 32 bits (not available for CC26XX). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" line="850" column="1" bodyfile="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" bodystart="850" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1af450bbb82e3268acd51468d084b52b6d" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t I2S_Params::beforeWordPadding</definition>
        <argsstring></argsstring>
        <name>beforeWordPadding</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of SCK periods between the first WS edge and the MSB of the first audio channel data transferred during the phase. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" line="857" column="1" bodyfile="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" bodystart="857" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1abedf75df9cdd087f99fc5f7caeb67277" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t I2S_Params::afterWordPadding</definition>
        <argsstring></argsstring>
        <name>afterWordPadding</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of SCK periods between the LSB of the an audio channel and the MSB of the next audio channel. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" line="860" column="1" bodyfile="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" bodystart="860" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1a4bde5e88326f32724193b9d67de9409c" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t I2S_Params::bitsPerWord</definition>
        <argsstring></argsstring>
        <name>bitsPerWord</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bits per sample (Word length): must be between 8 and 24 bits. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" line="863" column="1" bodyfile="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" bodystart="863" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1a0774324bd379cbac6bba7aada9a3017b" prot="public" static="no" mutable="no">
        <type><ref refid="_i2_s_8h_1a54ce68790d113be856f3a6840bc3ebe0" kindref="member">I2S_Role</ref></type>
        <definition>I2S_Role I2S_Params::moduleRole</definition>
        <argsstring></argsstring>
        <name>moduleRole</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Select if the I2S module is a Slave or a Master.<itemizedlist>
<listitem><para><ref refid="_i2_s_8h_1a54ce68790d113be856f3a6840bc3ebe0a2e9b49c09201c26bec35c9b854b09e08" kindref="member">I2S_SLAVE</ref>: The device is a slave (clocks are generated externally).</para></listitem><listitem><para><ref refid="_i2_s_8h_1a54ce68790d113be856f3a6840bc3ebe0a10b52b2d09a9f58e2daeec0f5a392bea" kindref="member">I2S_MASTER</ref>: The device is a master (clocks are generated internally). </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" line="866" column="1" bodyfile="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" bodystart="866" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1ab963a56402bc13a1e6c16fa046db151f" prot="public" static="no" mutable="no">
        <type><ref refid="_i2_s_8h_1adf99b8155252f529a3089cee99c52a51" kindref="member">I2S_SamplingEdge</ref></type>
        <definition>I2S_SamplingEdge I2S_Params::samplingEdge</definition>
        <argsstring></argsstring>
        <name>samplingEdge</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Select edge sampling type.<itemizedlist>
<listitem><para><ref refid="_i2_s_8h_1adf99b8155252f529a3089cee99c52a51ac2b123abf8d93dc779178fd3ede764eb" kindref="member">I2S_SAMPLING_EDGE_FALLING</ref>: Sampling on falling edges (for DSP data format).</para></listitem><listitem><para><ref refid="_i2_s_8h_1adf99b8155252f529a3089cee99c52a51a54900e14a06cfb9a08de7b1ed2583491" kindref="member">I2S_SAMPLING_EDGE_RISING</ref>: Sampling on rising edges (for I2S, LJF and RJF data formats). </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" line="871" column="1" bodyfile="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" bodystart="871" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1a1e7dcdbcaa1d392499e7e8c5194ccb11" prot="public" static="no" mutable="no">
        <type><ref refid="_i2_s_8h_1a3b6754868d365f8e3ec9b67883bf1a7e" kindref="member">I2S_DataInterfaceUse</ref></type>
        <definition>I2S_DataInterfaceUse I2S_Params::SD0Use</definition>
        <argsstring></argsstring>
        <name>SD0Use</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Select if SD0 is an input, an output or disabled.<itemizedlist>
<listitem><para><ref refid="_i2_s_8h_1a3b6754868d365f8e3ec9b67883bf1a7eaa745a9c11f2a2d74d1c6d001a32b355b" kindref="member">I2S_SD0_DISABLED</ref>: Disabled.</para></listitem><listitem><para><ref refid="_i2_s_8h_1a3b6754868d365f8e3ec9b67883bf1a7eae0e5e7026b88277c279de0e798488e77" kindref="member">I2S_SD0_INPUT</ref>: Input.</para></listitem><listitem><para><ref refid="_i2_s_8h_1a3b6754868d365f8e3ec9b67883bf1a7eab32df02fc78f8a4eabe6efa84fe3b28e" kindref="member">I2S_SD0_OUTPUT</ref>: Output. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" line="876" column="1" bodyfile="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" bodystart="876" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1a40b06dc2ce35072ab5ce2af83710be37" prot="public" static="no" mutable="no">
        <type><ref refid="_i2_s_8h_1a3b6754868d365f8e3ec9b67883bf1a7e" kindref="member">I2S_DataInterfaceUse</ref></type>
        <definition>I2S_DataInterfaceUse I2S_Params::SD1Use</definition>
        <argsstring></argsstring>
        <name>SD1Use</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Select if SD1 is an input, an output or disabled.<itemizedlist>
<listitem><para><ref refid="_i2_s_8h_1a3b6754868d365f8e3ec9b67883bf1a7eaac2fb5fe175b0b96da5c7ea069ae48b6" kindref="member">I2S_SD1_DISABLED</ref>: Disabled.</para></listitem><listitem><para><ref refid="_i2_s_8h_1a3b6754868d365f8e3ec9b67883bf1a7eabc860688d07b2022d075448f597d7811" kindref="member">I2S_SD1_INPUT</ref>: Input.</para></listitem><listitem><para><ref refid="_i2_s_8h_1a3b6754868d365f8e3ec9b67883bf1a7ea966016f222e7831b399aac26e4b8c7f0" kindref="member">I2S_SD1_OUTPUT</ref>: Output. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" line="882" column="1" bodyfile="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" bodystart="882" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1ae97322ea561e6c5237b60818e82627e5" prot="public" static="no" mutable="no">
        <type><ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480" kindref="member">I2S_ChannelConfig</ref></type>
        <definition>I2S_ChannelConfig I2S_Params::SD0Channels</definition>
        <argsstring></argsstring>
        <name>SD0Channels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This parameter is a bit mask indicating which channels are valid on SD0. If phase type is &quot;dual&quot;, maximum channels number is two. Valid channels on SD1 and SD0 can be different. For dual phase mode:<itemizedlist>
<listitem><para><ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480af29054f891314a79ee5d2b105678fce5" kindref="member">I2S_CHANNELS_NONE</ref>: No channel activated: read -&gt; I2S does not receive anything (no buffer consumption) write -&gt; I2S does not send anything (no buffer consumption)</para></listitem><listitem><para><ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480a9ae976eea3f03628bac96b3bd5b590a9" kindref="member">I2S_CHANNELS_MONO</ref>: Only channel 1 is activated: read -&gt; I2S only reads channel 1 write -&gt; I2S transmits the data on channel 1 and duplicates it on channel 2</para></listitem><listitem><para><ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480ace24478308aa18581ea899b4749e1eee" kindref="member">I2S_CHANNELS_MONO_INV</ref>: Only channel 2 is activated: read -&gt; I2S only reads channel 2 write -&gt; I2S transmits the data on channel 2 and duplicates it on the channel 1 of the next word</para></listitem><listitem><para><ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480aa99f621d20e7c434dd8fc6eec81f88f7" kindref="member">I2S_CHANNELS_STEREO</ref>: STEREO: read -&gt; I2S reads both channel 1 and channel 2 write -&gt; I2S transmits data both on channel 1 and channel 2</para></listitem></itemizedlist>
For single phase mode:<itemizedlist>
<listitem><para>Various number of channels can be activated using: <ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480aef21e0755c603bfa84cfcfb76087a2f9" kindref="member">I2S_1_CHANNEL</ref>, <ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480a70296e535a023f5e486d169c56241938" kindref="member">I2S_2_CHANNELS</ref>, <ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480acde532a4455d55712113984d1d9d14ee" kindref="member">I2S_3_CHANNELS</ref>, <ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480a4de908d16fbc3997ca26f9daf0a1ab15" kindref="member">I2S_4_CHANNELS</ref>, <ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480a4dbc52ac6e50657e77ab1a5663c9bebb" kindref="member">I2S_5_CHANNELS</ref>, <ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480a6393bde043d2d9a820d0eaae3723390f" kindref="member">I2S_6_CHANNELS</ref>, <ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480a3d28c1be7347c31842f949fce1b5c245" kindref="member">I2S_7_CHANNELS</ref>, <ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480a7f1bd716ad44f22c8b359102c206c0fb" kindref="member">I2S_8_CHANNELS</ref>.</para></listitem><listitem><para><ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480a93050a292e0f863d146fc2bb6461505b" kindref="member">I2S_CHANNELS_ALL</ref>: The eight channels are activated </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" line="888" column="1" bodyfile="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" bodystart="888" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1a35e4c06e74c7ffee100850e93787d93b" prot="public" static="no" mutable="no">
        <type><ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480" kindref="member">I2S_ChannelConfig</ref></type>
        <definition>I2S_ChannelConfig I2S_Params::SD1Channels</definition>
        <argsstring></argsstring>
        <name>SD1Channels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This parameter is a bit mask indicating which channels are valid on SD1. If phase type is &quot;dual&quot;, maximum channels number is two. Valid channels on SD1 and SD0 can be different. For dual phase mode:<itemizedlist>
<listitem><para><ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480af29054f891314a79ee5d2b105678fce5" kindref="member">I2S_CHANNELS_NONE</ref>: No channel activated: read -&gt; I2S does not receive anything (no buffer consumption) write -&gt; I2S does not send anything (no buffer consumption)</para></listitem><listitem><para><ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480a9ae976eea3f03628bac96b3bd5b590a9" kindref="member">I2S_CHANNELS_MONO</ref>: Only channel 1 is activated: read -&gt; I2S only reads channel 1 write -&gt; I2S transmits the data on channel 1 and duplicates it on channel 2</para></listitem><listitem><para><ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480ace24478308aa18581ea899b4749e1eee" kindref="member">I2S_CHANNELS_MONO_INV</ref>: Only channel 2 is activated: read -&gt; I2S only reads channel 2 write -&gt; I2S transmits the data on channel 2 and duplicates it on the channel 1 of the next word</para></listitem><listitem><para><ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480aa99f621d20e7c434dd8fc6eec81f88f7" kindref="member">I2S_CHANNELS_STEREO</ref>: STEREO: read -&gt; I2S reads both channel 1 and channel 2 write -&gt; I2S transmits data both on channel 1 and channel 2</para></listitem></itemizedlist>
For single phase mode:<itemizedlist>
<listitem><para>Various number of channels can be activated using: <ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480aef21e0755c603bfa84cfcfb76087a2f9" kindref="member">I2S_1_CHANNEL</ref>, <ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480a70296e535a023f5e486d169c56241938" kindref="member">I2S_2_CHANNELS</ref>, <ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480acde532a4455d55712113984d1d9d14ee" kindref="member">I2S_3_CHANNELS</ref>, <ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480a4de908d16fbc3997ca26f9daf0a1ab15" kindref="member">I2S_4_CHANNELS</ref>, <ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480a4dbc52ac6e50657e77ab1a5663c9bebb" kindref="member">I2S_5_CHANNELS</ref>, <ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480a6393bde043d2d9a820d0eaae3723390f" kindref="member">I2S_6_CHANNELS</ref>, <ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480a3d28c1be7347c31842f949fce1b5c245" kindref="member">I2S_7_CHANNELS</ref>, <ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480a7f1bd716ad44f22c8b359102c206c0fb" kindref="member">I2S_8_CHANNELS</ref>.</para></listitem><listitem><para><ref refid="_i2_s_8h_1accc9f53ca7fa3c96306f474cc0ade480a93050a292e0f863d146fc2bb6461505b" kindref="member">I2S_CHANNELS_ALL</ref>: The eight channels are activated </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" line="911" column="1" bodyfile="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" bodystart="911" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1a5b80fd825ba28a6db860108a9cb4f5e1" prot="public" static="no" mutable="no">
        <type><ref refid="_i2_s_8h_1a5d9de87aff52f63eadf4a95560abd61f" kindref="member">I2S_PhaseType</ref></type>
        <definition>I2S_PhaseType I2S_Params::phaseType</definition>
        <argsstring></argsstring>
        <name>phaseType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Select phase type.<itemizedlist>
<listitem><para><ref refid="_i2_s_8h_1a5d9de87aff52f63eadf4a95560abd61fabe139271fd1177a8b3e81156a966695d" kindref="member">I2S_PHASE_TYPE_SINGLE</ref>: Single phase (for DSP format): up to eight channels are usable.</para></listitem><listitem><para><ref refid="_i2_s_8h_1a5d9de87aff52f63eadf4a95560abd61fa0b3e4c2e6cca0317d05ec75b872b34de" kindref="member">I2S_PHASE_TYPE_DUAL</ref>: Dual phase (for I2S, LJF and RJF data formats): up to two channels are usable.</para></listitem></itemizedlist>
This parameter must not be considered on CC32XX. This chip only allows dual phase formats. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" line="934" column="1" bodyfile="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" bodystart="934" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1ae3241f138f3e247875ef9686622b4d43" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t I2S_Params::fixedBufferLength</definition>
        <argsstring></argsstring>
        <name>fixedBufferLength</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of consecutive bytes of the samples buffers. This field must be set to a value x different from 0. All the data buffers used (both for input and output) must contain N*x bytes (with N an integer verifying N&gt;0). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" line="941" column="1" bodyfile="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" bodystart="941" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1ad43b78dab7cc91991be4c6c8f67814e3" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t I2S_Params::startUpDelay</definition>
        <argsstring></argsstring>
        <name>startUpDelay</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Time (in number of WS cycles) to wait before the first transfer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" line="945" column="1" bodyfile="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" bodystart="945" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1a88df8c7e594eded74880e06ccb5cae12" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t I2S_Params::MCLKDivider</definition>
        <argsstring></argsstring>
        <name>MCLKDivider</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Select the frequency divider for MCLK signal. Final value of MCLK is 48MHz/MCLKDivider. Value must be selected between 2 and 1024. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" line="948" column="1" bodyfile="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" bodystart="948" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1aff5aa130ef087ebb86932182787c1df8" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t I2S_Params::samplingFrequency</definition>
        <argsstring></argsstring>
        <name>samplingFrequency</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>I2S sampling frequency configuration in samples/second. SCK frequency limits:<itemizedlist>
<listitem><para>For CC26XX, SCK frequency should be between 47 kHz and 4 MHz.</para></listitem><listitem><para>For CC32XX, SCK frequency should be between 57 Hz and 8 MHz. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" line="951" column="1" bodyfile="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" bodystart="951" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1a94ed67cfe1320bd8daf013c132b907cc" prot="public" static="no" mutable="no">
        <type><ref refid="_i2_s_8h_1a011a6a344bae2163e24b811e75c76fde" kindref="member">I2S_Callback</ref></type>
        <definition>I2S_Callback I2S_Params::readCallback</definition>
        <argsstring></argsstring>
        <name>readCallback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to read callback. Cannot be NULL if a read interface is activated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" line="957" column="1" bodyfile="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" bodystart="957" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1a2cf905e275e93a49707613aedcb2ab9b" prot="public" static="no" mutable="no">
        <type><ref refid="_i2_s_8h_1a011a6a344bae2163e24b811e75c76fde" kindref="member">I2S_Callback</ref></type>
        <definition>I2S_Callback I2S_Params::writeCallback</definition>
        <argsstring></argsstring>
        <name>writeCallback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to write callback. Cannot be NULL if a write interface is activated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" line="960" column="1" bodyfile="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" bodystart="960" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1aa12b8175a33bc574818208f4ccb8540d" prot="public" static="no" mutable="no">
        <type><ref refid="_i2_s_8h_1a011a6a344bae2163e24b811e75c76fde" kindref="member">I2S_Callback</ref></type>
        <definition>I2S_Callback I2S_Params::errorCallback</definition>
        <argsstring></argsstring>
        <name>errorCallback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to error callback. Cannot be NULL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" line="963" column="1" bodyfile="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" bodystart="963" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_s___params_1af9d903683ef9e8352c6f1bda555a740c" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* I2S_Params::custom</definition>
        <argsstring></argsstring>
        <name>custom</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to device specific custom params </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" line="966" column="1" bodyfile="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" bodystart="966" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic I2S Parameters. </para>    </briefdescription>
    <detaileddescription>
<para>I2S parameters are used to with the <ref refid="_i2_s_8h_1a49305a04152a6fb37a7afceabca642eb" kindref="member">I2S_open()</ref> call. Default values for these parameters are set using <ref refid="_i2_s_8h_1a961c116273a6e8d4581278b2666f13b5" kindref="member">I2S_Params_init()</ref>.</para><para><simplesect kind="see"><para><ref refid="_i2_s_8h_1a961c116273a6e8d4581278b2666f13b5" kindref="member">I2S_Params_init()</ref> </para></simplesect>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="140">
        <label>I2S_Config</label>
        <link refid="struct_i2_s___config"/>
      </node>
      <node id="139">
        <label>I2S_Params</label>
        <link refid="struct_i2_s___params"/>
        <childnode refid="140" relation="usage">
          <edgelabel>errorCallback</edgelabel>
          <edgelabel>readCallback</edgelabel>
          <edgelabel>writeCallback</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" line="824" column="1" bodyfile="exports/tidrivers_cc32xx/source/ti/drivers/I2S.h" bodystart="824" bodyend="968"/>
    <listofallmembers>
      <member refid="struct_i2_s___params_1abedf75df9cdd087f99fc5f7caeb67277" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>afterWordPadding</name></member>
      <member refid="struct_i2_s___params_1af450bbb82e3268acd51468d084b52b6d" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>beforeWordPadding</name></member>
      <member refid="struct_i2_s___params_1a4bde5e88326f32724193b9d67de9409c" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>bitsPerWord</name></member>
      <member refid="struct_i2_s___params_1af9d903683ef9e8352c6f1bda555a740c" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>custom</name></member>
      <member refid="struct_i2_s___params_1aa12b8175a33bc574818208f4ccb8540d" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>errorCallback</name></member>
      <member refid="struct_i2_s___params_1ae3241f138f3e247875ef9686622b4d43" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>fixedBufferLength</name></member>
      <member refid="struct_i2_s___params_1a9d3ad248a0bca19f6c8aba2ef4e311c7" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>invertWS</name></member>
      <member refid="struct_i2_s___params_1a040e104c9b7118fb5719b3007801a2cb" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>isDMAUnused</name></member>
      <member refid="struct_i2_s___params_1aa6bc7fe594699bd27444b2b3b8aa17e4" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>isMSBFirst</name></member>
      <member refid="struct_i2_s___params_1a88df8c7e594eded74880e06ccb5cae12" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>MCLKDivider</name></member>
      <member refid="struct_i2_s___params_1a257e437c1d8fb08ddd7457c47c479db5" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>memorySlotLength</name></member>
      <member refid="struct_i2_s___params_1a0774324bd379cbac6bba7aada9a3017b" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>moduleRole</name></member>
      <member refid="struct_i2_s___params_1a5b80fd825ba28a6db860108a9cb4f5e1" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>phaseType</name></member>
      <member refid="struct_i2_s___params_1a94ed67cfe1320bd8daf013c132b907cc" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>readCallback</name></member>
      <member refid="struct_i2_s___params_1ab963a56402bc13a1e6c16fa046db151f" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>samplingEdge</name></member>
      <member refid="struct_i2_s___params_1aff5aa130ef087ebb86932182787c1df8" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>samplingFrequency</name></member>
      <member refid="struct_i2_s___params_1ae97322ea561e6c5237b60818e82627e5" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>SD0Channels</name></member>
      <member refid="struct_i2_s___params_1a1e7dcdbcaa1d392499e7e8c5194ccb11" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>SD0Use</name></member>
      <member refid="struct_i2_s___params_1a35e4c06e74c7ffee100850e93787d93b" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>SD1Channels</name></member>
      <member refid="struct_i2_s___params_1a40b06dc2ce35072ab5ce2af83710be37" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>SD1Use</name></member>
      <member refid="struct_i2_s___params_1ad43b78dab7cc91991be4c6c8f67814e3" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>startUpDelay</name></member>
      <member refid="struct_i2_s___params_1a3b7f7f942b6fb548141409be5a228e9c" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>trueI2sFormat</name></member>
      <member refid="struct_i2_s___params_1a2cf905e275e93a49707613aedcb2ab9b" prot="public" virt="non-virtual"><scope>I2S_Params</scope><name>writeCallback</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
